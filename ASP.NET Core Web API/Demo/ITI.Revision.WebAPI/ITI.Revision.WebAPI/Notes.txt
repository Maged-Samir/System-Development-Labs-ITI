ASP.Net Core Web API 
API- Sharing Functionality between different Clients (Angular-React-Native JS)
Create group of End Points and make different Clients deal with them 
the same idea of MVC pattern but here we will have only models, controller 
and for the views each one will pick his view(technology)

Http Request 
              ---> 
                   Server
Http Response <---

Http Request  (Method[get-post] - Header[Metadata/json,xml,langu] -Body[data])
Http Response similler to request but we add new part Status Code(200-400-500)

RestFul APis(guidelines) - SOAP API(Old Protocol based xml)

Routing is different here not like MVC 
 [Route("api/[controller]")]
 if we have parameter changed like id
 add  [Route("{id}")]

 Don't Forget HTTP Method for every end point 

 Difference between Middleware & Filter 
 Validators attribute

 ASP.Net give us group Of Services 
 ILogger - log errors in console

 record C# class - imutable once i created object i can't change it 
 intialize it with parameter constractor 
 equality in record is value type 

 ------------------------------------------------------------------------------------------

 Using entity frameworkCore 
 at first we need to install our three main packages 
 and create applicationDbContext with it's constractour & dbsets
 and create connection string in program.cs and appsetting.json 
 
 the models which we have in this project 
 Student and Course where the relation between them many to many 
 after we create it and start to deal with courses and start with post action , we will find that 
 ther is problem that we need to define full object of course which contain list of students 
 and it's not logic ,so we will disover a new consept called DTO (Data Transfer Object)

 also we will see the problem of refrence loop 
 that we will see a cyclic processes between objects like Course and Student 
 for handeling refrence loop circular we will write some configuration in program.cs 
 for preventing our objects inside project from this problem 

if we foucsed in any action of our controllers we will see that 
 1.retrive data from database 
 2.mapping data from models to dto
 3.handle http response (main part of actions)

 all these steps are in one action and if we followed the solid priciples , 
 we will find that there is abig confilict between our action and single responsability principles 
 so we need to create layered structure for our project , some times we divide it to folders 
 and others divide it to different project 

  1.Data Access Layer  (reposatories)
  2.Bussiness Layer    (services-dto)
  3.Presentation Layer (Controllers)


 ------------------------------------------------------------------------------------------

 Secure API & Identity 
 we need to understand the flow of security of our APIS
 first it's not like mvc we scaffolded some pages and controllers but here we need to write every thing manually 

 at firts we need to generate token and send it to user save it in his pc
 and every time he come with request send the token 

 so now what is the token consist of 
 token (Hashing Algorism - Claims - Hashing Result)

 Claims - is group of information about user arranged as key-value pairs
 Hashing Algorithm - is an algorithem used to hash our claims & secrit key to get hashing result
 and note that there is a secrite key i write this key to combine it with claims of user

 HashingResult=HashingAlgorithem(Claims,SecritKey)

 to apply this in our project 
 at first we will create static login to generate token and deal with it 
 after that we will install identity in our project for test 

