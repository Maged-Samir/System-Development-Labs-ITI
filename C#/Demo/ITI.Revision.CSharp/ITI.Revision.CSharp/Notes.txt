CSharp
CTS common type system 

we can classified data types into two classification 
 1.value type struct & Enum (Stack) fast
 2.referance type Class     (Stack & Heap)

 Facts for struct 
  we can't inherite from strcut or make it inherite another struct 
  struct is a value type so it saved in stack in the memory 
  before C# 11 struct must be fully assigned and also struct have default ctor (parameterless CTOR)
    
Enum 
is a value data type used to represent grou of values as strings 
help us more to take static string values from users  

System.Object 
is the base type of all types in C# , so we can save inside object any type of data (int, string , ...)
according to inheritance cases that reference of parent point to childs 

when we deal with System.Object we find concepts of Boxing And UnBoxing 
Boxing that we can cust between value data type to referance 
Unboxing that we can cust referance data type to value 

according to Object type in C# , we can create array of object which take different data types 
but the problem which we found the processes of boxing and unboxing 

Stack Trace : C# object help us to trace orders Of Our Function when we need to see our order starting from 
              main function and then tracing every function with stck fram


Exception Handeling 
help us more to handeling exception , note that every try block should followed with another block catch or finally 
and also the general exception should be the las one after handeling every cases 
and also we can create our custonm exception when we create New Class for exception and make it inherite from Exception class 

Functions 
in C# we get New Features for parameter functions like 
  1.Named parameter --> we we call functions we can pass parameter for method without it's order using named 
  2.Default Values for parameter , here we can write default values for parameter of functions 

Pass By Value -->ReadOnly 
Pass By Referance -->read & write must be  intialized 
Out Parameter    --> needn't to intialized used to get it's value as an output 

Indexes in C# 
Indexes in C# help us to get Fast Access for object which Contain Collection Of Another object
look like properties with using this keyword

Copy Ctor
create object by using another object 

Static Keyword
Static Method     method needn't obj to call - class member
Static attribute  (Class attribute) shared members between all objects
Static Ctor       used to intialize default values for static attributes
Static Class      container for all static members 

Operator Overloading Must be static -->static Methods 

Singletone Design Pattern Lecture 05 -----------------------------------------------------------------------

for equality we have 4 methods to check equality in system.object
1 virtual ref
2 static ref
3 static ref 
4 equality operator = ref 

so if we need to cheak equality for userdefined type we must override equalis 

interface comes to solve multipule inheritance and problem of diamond shape 
code contract 
between class and the inherited interface


inheritance 
statically binding        parent p = new child(); 
Dynamically binding       


Icombarable<obj>         these two interfaces help us to implemnt sorting our user definde types 
Icombarer (obj,obj)

Generics<T> Type : declare methods without specific data type during run time we will declare it 
class and methods can support Generics Types 

Collections ArrayList
            List
main problems in Collections are Boxing and UnBoxing
Generic Collections is the best solution 

Dictionary is a collections help us to deal with key value pairs and note that key is a unique in Dictionary 


Delegates
delegate is a pointer to function 
we use delegates in two important cases 
   1.if we need to pass function as a parameter to another function 
   2.if we need to call more than one function at the same time 

the only condition which we have to declare delegate is that has the same signature of the function 

Built-in Delegates 
  1. Predicate<>
     it takes one parameter and return Boolen 

  2. Func<>
     it must has one out put and for input parameter takes 17 overloading 
 
  3. Action<>
     always return Void , take different inputs 16 overloading 


Hashing Table - Hash Code 
PLINQ - Optmization Linq Queries 
Install-Package BenchmarkDotNet 
great package to follow our code optmization 


Threading 
parallel path execution
all code that we have writen is sequential execution 
today we need to change execution path of Program
old days we were have only one single core for processor 
 
main purpose for Threading in Gui (responsiveness) - long running process



